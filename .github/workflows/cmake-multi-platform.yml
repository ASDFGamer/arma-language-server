# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "dap/cd" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # ToDo: Fix macos build
        # ToDo: Find alternative for std::chrono::clock_cast on non-msvc compilers
        # os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        arch: [x86, x64]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: x86-windows
            platform: windows-x86
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            vcpkg_triplet: x64-windows
            platform: windows-x64
          #- os: macos-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
          #  vcpkg_triplet: x64-osx-release
          #  platform: macos
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  cpp_compiler: clang++
          #  vcpkg_triplet: x64-linux-release
          #  platform: linux
        exclude:
          # windows-latest
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          
          ## ubuntu-latest
          #- os: ubuntu-latest
          #  c_compiler: clang
          #  arch: x86
          #- os: ubuntu-latest
          #  c_compiler: cl
          #  arch: x86
          #- os: ubuntu-latest
          #  c_compiler: cl
          #  arch: x64
          
          ## macos-latest
          #- os: macos-latest
          #  c_compiler: clang
          #  arch: x86
          #- os: macos-latest
          #  c_compiler: cl
          #  arch: x86
          #- os: macos-latest
          #  c_compiler: cl
          #  arch: x64

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    
    - name: vcpkg build
      uses: johnwason/vcpkg-action@v5
      id: vcpkg
      with:
        manifest-dir: ${{ github.workspace }}/server
        triplet: ${{ matrix.vcpkg_triplet }}
        cache-key: ${{ matrix.config.os }}
        revision: 8b04a7bd93bef991818fc372bb83ce00ec1c1c16 #master
        token: ${{ github.token }}
        
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os != 'windows.latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}
        -S ${{ github.workspace }}/server

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'windows.latest' }}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -A ${{ matrix.arch == 'x86' && 'Win32' || matrix.arch }}
        ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}
        -S ${{ github.workspace }}/server

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload binary
      uses: actions/upload-artifact@v3
      if: ${{ matrix.os == 'ubuntu-latest' }}
      with:
        name: ${{ matrix.platform }}
        if-no-files-found: error
        path: |
          ./build/sqfvm_language_server/sqfvm_language_server
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download binaries
        uses: actions/download-artifact@v3
      - name: Print ubuntu results
        run: |
          echo "Results:"
          find ./
      - uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install YARN
        run: npm install -g yarn
      - name: Install VCSE
        run: npm install -g @vscode/vsce
      - name: Run YARN
        working-directory: ./client/vscode
        run: yarn
      # - name: Package Extension
      #   working-directory: ./client/vscode
      #   run: vsce package --yarn
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v1
#        with:
#          node-version: 16
#      - run: npm ci
#      - name: Publish to Open VSX Registry
#        uses: HaaLeo/publish-vscode-extension@v1
#        with:
#          pat: ${{ secrets.OPEN_VSX_TOKEN }}
#      - name: Publish to Visual Studio Marketplace
#        uses: HaaLeo/publish-vscode-extension@v1
#        with:
#          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
#          registryUrl: https://marketplace.visualstudio.com
